%Naga Sudheer Ravela 
%for copyright issues mail me sudheerr48@gmail.com
%Dataset is retrieved from UCI Machine Learning Repository
%URL=https://archive.ics.uci.edu/ml/datasets/wholesale+customers
%Dataset copyrights to Margarida G. M. S. Cardoso, margarida.cardoso '@' iscte.pt, ISCTE-IUL, Lisbon, Portugal



clc;
clear all;
close all;
 
%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Sudheer Ravela\Desktop\Ass1_data.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/06/10 07:56:13

%% Initialize variables.
filename = 'C:\Users\Sudheer Ravela\Desktop\Ass1_data.csv';
delimiter = ',';
startRow = 2;

%% Format string for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Allocate imported array to column variable names
Channel = dataArray{: ,1};
Region = dataArray{:, 2};
Fresh = dataArray{:, 3};
Milk = dataArray{:, 4};
Grocery = dataArray{:, 5};
Frozen = dataArray{:, 6};
Detergents_Paper = dataArray{:, 7};
Delicassen = dataArray{:, 8};

%%Inputs 
%%Fresh ,Milk ,Grocery ,Frozen,Detergents_Paper ,Delicassen 


%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID  ans;
%Initialising size 
n=8;


%% Calculation of Mean vector
for i=1:n
    mean_vector(i)= mean(dataArray{:, i});
end
mean_vector_inputs=mean_vector(3:8)
%%Calculation of Standard Deviation
for i=1:n
    standard_deviation_vector(i)=std(dataArray{:, i});
end
standard_deviation_vector_inputs=standard_deviation_vector(3:8)

%%Histogram plotting for input Fresh
figure;
hold on;
histogram(Fresh)
set(gca,'fontsize',12);
xlabel('Fresh -->','fontsize',12);
ylabel('count --->','fontsize',12);
title('Histogram plot for  variable Fresh','fontsize',15);
hold off;

%%Scatter diagram  for fresh input
figure;
scatter(Grocery(200:300),Milk(200:300),[],Grocery(200:300));
xlabel('Grocery -->','fontsize',12);
ylabel('Milk --->','fontsize',12);
title('Scatter plot for  variables Grocery,Milk','fontsize',14);

%%3-D Scatter diagram  for fresh input
figure;
Ass1data = [dataArray{1:end-1}];
Ass1output1=Ass1data(:,1);
Ass1output2=Ass1data(:,2);
O1=Ass1output1(:,1);
scatter3(Grocery(200:300),Milk(200:300),Frozen(200:300),[],Grocery(200:300));
xlabel('Grocery -->','fontsize',12);
ylabel('Milk --->','fontsize',12);
zlabel('Frozen -->','fontsize',12);
title('3-D Scatter plot for  variables Grocery,Milk,Frozen','fontsize',14);


%%Box Plot
figure;
boxplot([Fresh(1:58,1) Milk(1:58,1) Grocery(1:58,1) Frozen(1:58,1)]);
set(gca,'fontsize',12);
grid on;
xlabel('Fresh         Milk          Grocery             Frozen','fontsize',12);
ylabel('Monetary units(m.u) --->','fontsize',12);
title('Box plot for  attributes Fresh ,milk, grocery, frozen','fontsize',15);


%%Parallel coordinates 
figure;
label={'Milk' ,'Grocery' ,'Frozen'};
Ass1data = [dataArray{1:end-1}];
Ass1input=Ass1data(250:300,4:6);
Ass1output1=Ass1data(250:300,1);
Output2=zeros(50,1); 
for i=1:100
    if (Channel(i) == 1)
        Y1(i)={'Horeca'};
    else
        Y1(i)={'Retail channel'};
    end
end
for i=250:300
    if Region(i) == 1
        X1(i)={'Lisnon Region'};
    elseif Region(i) == 2
        X1(i)={'Oporto Region'};
    else
         X1(i)={'Other Region'};
        end
end
Output1=transpose(Y1);
Output2=transpose(X1(250:300));
parallelcoords(Ass1input,'group',Output2,'label',label);
title('Parallel coordinates');

