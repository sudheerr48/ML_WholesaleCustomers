%Naga Sudheer Ravela
%About copyrights please mail me to sudheerr48@gmail.com
%Dataset is retrieved from UCI Machine Learning Repository found at https://archive.ics.uci.edu/ml/datasets/wholesale+customers
%Dataset copyrights to Margarida G. M. S. Cardoso, margarida.cardoso '@' iscte.pt, ISCTE-IUL, Lisbon, Portugal
clc;
close all;
clear all;
%% Import data from text file.
% Script for importing data from the following text file:
%
%    C:\Users\Sudheer Ravela\Desktop\Ass1_data.csv
%
% To extend the code to different selected data or a different text file,
% generate a function instead of a script.

% Auto-generated by MATLAB on 2017/07/02 07:19:23

%% Initialize variables.
filename = 'C:\Users\Sudheer Ravela\Desktop\Ass1_data.csv';
delimiter = ',';
startRow = 2;

%% Format string for each line of text:
%   column1: double (%f)
%	column2: double (%f)
%   column3: double (%f)
%	column4: double (%f)
%   column5: double (%f)
%	column6: double (%f)
%   column7: double (%f)
%	column8: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%f%f%f%f%f%f%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter, 'HeaderLines' ,startRow-1, 'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
Ass1data = [dataArray{1:end-1}];
%% Clear temporary variables
clearvars filename delimiter startRow formatSpec fileID  ans;
%% Seperating inputs and outputs

x=Ass1data(:,3:8);
y1=Ass1data(:,1);
y2=Ass1data(:,2);

%%Partitioning Data ( 50% for Training , 50% for Testing )
cv=cvpartition(length(x),'holdout',0.5);
xtrain=x(training(cv),:);
y1train=y1(training(cv),:);
y2train=y2(training(cv),:);
xtest=x(test(cv),:);
y1test=y1(test(cv),:);
y2test=y2(test(cv),:);

%%naÔve Bayesian classification
NavBay1=fitcnb(xtrain,y1train);
y_t1=predict(NavBay1,xtest);
c_t_NB1=confusionmat(y1test,y_t1);
figure;
hold on;
plotmatrix(c_t_NB1,'*r');
title('Confusion Matrix When using Naive Bayesian Classifier');
disp('Confusion Matrix When using Naive Bayesian Classifier');
disp(c_t_NB1);
hold off;
%%support vector machines

SVM1=fitcecoc(xtrain,y1train);
y_t1=predict(SVM1,xtest);
c_t_S=confusionmat(y1test,y_t1);
figure;
plotmatrix(c_t_S,'*b');
title('Confusion Matrix When using Support vector machines');
disp('Confusion Matrix When using Support vector machines');
disp(c_t_S);

%%LDR
LDR1=fitcdiscr(xtrain,y1train);
y_t1=predict(LDR1,xtest);
c_t_L=confusionmat(y1test,y_t1);
figure;
plotmatrix(c_t_L,'*g');
title('Confusion Matrix When using Linear Discriminant Functions');
disp('Confusion Matrix When using Linear Discriminant Functions');

disp(c_t_L);

%%Calculation of accuracy

disp('Accuracy Calculation ');
disp('Accuracy while using Linear Discriminant Function :');
a(1)=(c_t_L(1,1)+c_t_L(2,2))/(220);
a(1)
disp('Accuracy while using naÔve Bayesian classification  :');
a(2)=(c_t_NB1(1,1)+c_t_NB1(2,2))/(220);
a(1,2)
disp('Accuracy when using Support Vector Machines method :');
a(3)=(c_t_S(1,1)+c_t_S(2,2))/(220);
a(1,3)


%%Calculation of Error Rate
disp('Error rate Calculation ');
disp('Error rate while using Linear Discriminant Function :');
e(1)=(c_t_L(1,2)+c_t_L(2,1))/(220)
disp('Error rate while using naÔve Bayesian classification  :');
e(2)=(c_t_NB1(1,2)+c_t_NB1(2,1))/(220);
e(1,2)
disp('Error rate when using Support Vector Machines method :');
e(3)=(c_t_S(1,2)+c_t_S(2,1))/(220);
e(1,3)

%%Calculation of Sensitivity
disp('Sensitivity Calculation ');
disp('Sensitivity while using Linear Discriminant Function :');
Se(1)=(c_t_L(1,1))/(c_t_L(1,1)+c_t_L(1,2))
disp('Sensitvity while using naÔve Bayesian classification  :');
Se(2)=(c_t_NB1(1,1))/(c_t_NB1(1,1)+c_t_NB1(1,2));
Se(1,2)
disp('Sensitivity when using Support Vector Machines method :');
Se(3)=(c_t_S(1,1))/(c_t_S(1,1)+c_t_S(1,2));
Se(1,3)
%%Calculation of Specificity

disp('Specificity Calculation ');
disp('Specificity while using Linear Discriminant Function :');
Sp(1)=(c_t_L(2,2))/(c_t_L(2,1)+c_t_L(2,2))
disp('Specificity while using naÔve Bayesian classification  :');
Sp(2)=(c_t_NB1(2,1))/(c_t_NB1(2,1)+c_t_NB1(2,2));
Sp(1,2)
disp('Specificity when using Support Vector Machines method :');
Sp(3)=(c_t_S(2,1))/(c_t_S(2,1)+c_t_S(2,2))
Sp(1,3)






